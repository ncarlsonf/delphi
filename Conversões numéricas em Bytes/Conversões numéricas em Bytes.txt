
---------------------------------------------------------------------------------------------------- 
Bases numérica utilizadas na computação
---------------------------------------------------------------------------------------------------- 

Binária (Base 2):
Representa valores numéricos utilizando 2 símbolos/algarismos numéricos
Símbolos: 0, 1

Octal (Base 8):
Representa valores numéricos utilizando 8 símbolos/algarismos numéricos
Símbolos: 0, 1, 2, 3, 4, 5, 6, 7

Decimal (Base 10):
Representa valores numéricos utilizando 10 símbolos/algarismos numéricos
Símbolos: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9

Hexadecimal (Base 16):
Representa valores numéricos utilizando 16 símbolos/algarismos numéricos
Símbolos: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F

*Obs.: a base octal já foi muito utilizada na computação, sendo substituída pelo hexadecimal.

*Obs.2: Em outras bases que não seja a decimal não existe o número dez, onze, doze, vinte... 
   Lê-se 
   - 10o = hum zero na base octal, ou hum zero octal
   - 12x = hum dois na base hexadecimal, ou hum dois hexadecimal, ou hum dois hexa
   - 11b = hum hum na base binária ou hum hum binário
   - 12d = doze na base decimal, apesar de que doze só existe em base decimal
   - 47x = quatro sete na base hexadecimal, ou quatro sete hexadecimal, ou quatro sete hexa
   - 63o = seis tres na base octal, ou seis tres octal
   
   Portanto dez, onze, doze, treze, quatorze, quinze, desesseis, ..., vinte, trinta, quarenta, ...
   oitenta, noventa, cem, duzentos, mil, ... só existem na base decimal. 

   
---------------------------------------------------------------------------------------------------- 
Transformação de um Byte de binário (número base 2) para decimal (número base 10):
----------------------------------------------------------------------------------------------------

 1 0 1 0 1 1 0 1
 | | | | | | | |
 | | | | | | | |________ bit * 2^0 (ou 1)   = 1 * 1   = 1
 | | | | | | |__________ bit * 2^1 (ou 2)   = 0 * 2   = 0
 | | | | | |____________ bit * 2^2 (ou 4)   = 1 * 4   = 4
 | | | | |______________ bit * 2^3 (ou 8)   = 1 * 8   = 8
 | | | |________________ bit * 2^4 (ou 16)  = 0 * 16  = 0
 | | |__________________ bit * 2^5 (ou 32)  = 1 * 32  = 32
 | |____________________ bit * 2^6 (ou 64)  = 0 * 64  = 0
 |______________________ bit * 2^7 (ou 128) = 1 * 128 = 128

 1 + 4 + 8 + 32 + 128 = 173 decimal

----------------------------------------------------------------------------------------------------  
Transformação de um Byte de decimal (número base 10) para binário (número base 2):
----------------------------------------------------------------------------------------------------
 
 Como transformar 173d (d de base decimal / base 10) em 10101101b (b de base binário / base 2)?

 operação    resultado    resto
 173 div 2 |    86     |    1    |-----------------------+
  86 div 2 |    43     |    0    |---------------------+ |
  43 div 2 |    21     |    1    |-------------------+ | |
  21 div 2 |    10     |    1    |-----------------+ | | |
  10 div 2 |     5     |    0    |---------------+ | | | |
   5 div 2 |     2     |    1    |-------------+ | | | | |
   2 div 2 |     1     |    0    |-----------+ | | | | | |
   1 div 2 |     0     |    1    |---------+ | | | | | | |
                                           | | | | | | | |
                                           1 0 1 0 1 1 0 1
  
  * Ao final lê o número binário de baixo para cima

----------------------------------------------------------------------------------------------------  
Transformação de um Byte de binário (número base 2) para hexadecimal (número base 16):
---------------------------------------------------------------------------------------------------- 

 1 0 1 0 1 1 0 1 para hexadecimal separamos o byte em duas metades [1010] e [1101]

 bin   dec   hex   oct
 0000    0     0     0
 0001    1     1     1
 0010    2     2     2
 0011    3     3     3
 0100    4     4     4
 0101    5     5     5
 0110    6     6     6
 0111    7     7     7
 1000    8     8    10
 1001    9     9    11
 1010   10     A    12
 1011   11     B    13
 1100   12     C    14
 1101   13     D    15
 1110   14     E    16
 1111   15     F    17

Então [1010] e [1101] é igual a [A] e [D]

Ou seja 10101101 (bin) é igual a AD (hex).

----------------------------------------------------------------------------------------------------  
Transformação de um Byte hexadecimal (número base 16) para um Byte decimal (número base 10):
----------------------------------------------------------------------------------------------------

 Como converter ADx (x de base hexadecimal) para 173d (d de base decimal)
    
 Hexa   Decimal
   A  =   10    ----- 10 * (16 ^ 1) = 10 * 16 = 160
   D  =   13    ----- 13 * (16 ^ 0) = 13 * 1  =  13
                                     
									Somar os resultados:
									160 + 13 = 173
									
  
 Mais um exemplo para fixar:

  9E3x

 Hexa   Decimal
   9  =    9    -----  9 * (16 ^ 2) = 9  * (16 * 16) = 9 * 256 = 2304
   E  =   14    ----- 14 * (16 ^ 1) = 14 * 16                  = 224
   3  =    3    -----  3 * (16 ^ 0) = 13 * 1                   =   3
 
                                    Somar os resultados:
									2304 + 224 + 3 = 2531 

----------------------------------------------------------------------------------------------------  
Transformação de um Byte decimal (número base 10) para um Byte hexadecimal (número base 16):
----------------------------------------------------------------------------------------------------

 Como converter 173d (d de base decimal) para ADx (x de base hexadecimal)
 
   operação   resultado     resto
 173 div 16 |   10 (A)  |   13 (D)   |  AD


 
 Mais exemplos para fixar:
 
 Como converter 174d (d de base decimal) para AEx (x de base hexadecimal)									

  operação   resultado     resto
 174 div 16 |   10 (A)  |   14 (E)   |  AE
 
 Como converter 175d (d de base decimal) para AFx (x de base hexadecimal)									

  operação   resultado     resto
 175 div 16 |   10 (B)  |   15 (F)   |  AF
 
 Como converter 176d (d de base decimal) para B0x (x de base hexadecimal)									

  operação   resultado     resto
 176 div 16 |   11 (B)  |    0 (0)   |  B0
 
---------------------------------------------------------------------------------------------------- 
Tabela Verdade:
---------------------------------------------------------------------------------------------------- 

^ é o simbolo de conjução em álgebra booleana, lógica matemática 
v é o simbolo de disjunção em álgebra booleana
~ é o símbolo de negação em álgebra booleana
xor 

  F = Falso = F = False = 0
  V = Verdadeiro = T = True = 1


Tabela verdade do E, AND, ^ (conjunção)
  
  A ^ B
 -------  
  F   F  = F
  F   V  = F
  V   F  = F
  V   V  = V
  
  
Tabela verdade do OU, OR, v (conjunção)  

  A v B
 -------  
  F   F  = F
  F   V  = V
  V   F  = V
  V   V  = V
  

Tabela verdade do NÃO, NOT, ~ (negação)  

  ~ A
 -----  
  F  = V
  V  = F

  
Tabela verdade do OU EXCLUSIVO, XOR, (disjunção exclusiva)    

  A xor B
 ---------  
  F   F  = F
  F   V  = V
  V   F  = V
  V   V  = F
  
https://pt.wikipedia.org/wiki/%C3%81lgebra_booliana  
https://www.inf.ufsc.br/~j.guntzel/isd/isd2.pdf  
https://www.inf.pucrs.br/emoreno/undergraduate/EC/cirdig/class_files/Aula02.pdf


  
  